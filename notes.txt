Bugs:

	The Telegram bot doesn't seem to always send messages when the player levels up. Is
		this related to the changes to add the updating message with the attack
		and flee buttons?

	Selling items shouldn't automatically sell every copy of that item. If the
		player has that item equipped but wants to sell a spare, they will lose
		the equipped item.

	Combat hp doesn't match /stats hp in the group chat:
		
		"""
		You attack the court jester of the werewolf!
		damage: 16
		court jester of the werewolf hp: 10

		The court jester of the werewolf attacks you!
		damage: 0
		your hp: 100
		"""
		
		"""
		location: fjord
		coordinates: (2, 3)
		level: 2
		hp: 150/156
		power: 3
		experience points: 132
		next level at: 210
		gold coins: 0
		places discovered: 13
		kills: 4
		deaths: 0
		items found: 1
		"""



New Features:

	Add logging to debug strange issues (e.g. bot stops responding with no error
		messages)?


	Add something to buy with money. Probably make money easier to get (increase
		item values and maybe add another way to get money).

	Could procedurally generate puzzles if people actually play with this enough
		to bother adding features: http://gamelab.mit.edu/research/puzzledice/
		
	Generate a map of all discovered areas and send to chat as an image.
		- See the "PIL (Python Image Manipulation)" bookmark folder in Firefox
			and /home/matthew/PIL Tests for information on how to make an image
			and a simple (and bad) example of what a map might look like.
		- I could probably draw 30 or fewer map symbols and reuse them enough to
			cover all of the place nouns.

	Craiyon seems to have an API... it might be free? Haven't found documentation yet.
		- https://api.craiyon.com/
		- https://github.com/FireHead90544/craiyon.py
		- Might be able to have it generate images for my randomly generated
			names.


inventory																		[done]
	- commands: list, use [item name]
	- the list command will show appropriate effects
		+ power boost for weapons "+x power"
		+ hp boost for armor "+y max hp"
		+ hp restoration for healing "restore z hp"
	- the list command will show the number of each item held
	- the use command will consume, equip, or unequip the item as appropriate
	- equippable items will get an "(equipped)" note in the list
	- The option to sell items will exist to allow the player to dispose of
		items to avoid having the list get too long. There will be no way to
		buy items. Gold coins will just accumulate in the player's stats.
	- there will be no size limit

combat																			[done]
	- Make hp and power integers... Floats will probably just get annoying for the user.
	- random encounters occur on movement
	- turn based
	- options in fight: attack, list, use, flee
	- attack always hits
		+ random damage based on player or creature's power stat
	- losing sends player back to start and costs gold
	- winning gives player procedurally generated item based on place difficulty
		+ item randomly selected from the place's procedurally generated item list

player stats																	[done]
	- hp, xp, power, nothing else
		+ Make hp and power integers... Floats will probably just get annoying for the user.
	- defensive equipment will increase max hp
	- offensive equipment will increase power
	- power affects attack damage
	- gold coins: useless, except as a form of points/score (there will be no
		way to buy things)
	- Player xp required to level up: previousRequirement + round(previousRequirement * 1.1)
		+ BAD! This keeps adding the xp requirement for all previous levels to each new level.
			Do this instead: self.xpForNextLevel += round(100 * math.pow(1.1, self.level))
	- Monster xp reward at difficulty level N: round(30 * math.pow(1.085, N))

movement																		[done]
	- north, east, south, west
	- store 2D integer coordinates for player location
	- random encounters occur on movement

procedurally generated places													[done]
	- Is it unreasonable to store procedurally generated content to avoid
		duplication across places?
		If an place has 100 procedurally generated entities, equivalent to 10
		lines of text (call it 500 characters) each, then we have 100 * 500 =
		50,000 characters = 50KB. If we generate 1,000 places, we have 50,000KB =
		50MB for a single save game (also 50MB in RAM for a single game).
		+ Not unreasonable, considering that it's unlikely that more than one
			instance of this will actually be running and that; if I limit the
			number of available weapon types, helmet types, body armor types,
			leg armor types, consumable, and monster types to 10 per area; I only
			have 60 entities in each area's table, not 100. That cuts the size
			from 50MB to 30MB. Add to that the unlikelihood of the Telegram
			group discovering 1,000 places and the realistic size of the file
			gets even smaller (3MB for 100 places).
	- Typically, would probably want to write things in a way that controls
		generation with a global seed and doesn't save everything that's generated.
		However, I want to save everything to prevent reuse of names across places,
		make items and monsters with the same names have the same stats
		across places, and avoid having to generate everything at the start of the
		game and for a preset number of places.
		+ BOTTOM LINE: There is no need for a global seed because it will not
			be in control anyway. Generation would still be different depending
			on the order in which the player revealed area. Therefore, don't
			bother with a global seed and just save everything that gets generated.
			
	- difficulty scales with distance from start
		+ stronger monsters
		+ more loot
	- generate the following
		+ place names
			-> place name pattern: {place adjective} [place noun] {postfix}
			-> The place nouns are ordered by some vague notion of similarity
				and contain duplicates to imply similarity between multiple places.
				Do not reorder (unless to improve "similarity") or run the
				deduplicator on the place names.
		+ monsters
			-> monster name pattern: {monster adjective} [monster noun] {postfix}
			-> Monster nouns are ordered by some vague notion of power. Do not
				reorder them (except to order more appropriately by "power").
			-> stats: random values scaled by place difficulty
			-> xp rewards: random amounts scaled by place difficulty
			-> names from some table of descriptors and nouns (like loot/items)
				- Regardless of where monster names come from, add at least a few
					nonsensical names (e.g. boogum, grobble, nibnab, spilf).
				- Get a big list from the internet.
					+ Also get a list of adjectives to randomly tack on.
					+ ChatGPT might work but there probably exist large lists
						that are much more convenient than anything it's likely
						to provide.
				- Possibly imply monster strength by name (e.g. find some list of
					creature names ordered by size and use smaller ones for weaker
					creatures and larger for stronger).
		+ loot/items
			-> item name pattern: {adverb} {item adjective} [noun] {postfix}
			-> type: healing, defensive equipment, offensive equipment
			-> stats based on place difficulty: heal amount, hp boost, power boost
			-> names from some table of descriptors and nouns (like monsters)
				- Get a big list from the internet.
					+ Also get a list of adjectives to randomly tack on.
					+ ChatGPT might work but there probably exist large lists
						that are much more convenient than anything it's likely
						to provide.
				- Have a separate list of nouns for three body parts:
					+ torso: curiass, shirt, jacket, etc.
					+ head: helmet, hat, hood, etc.
					+ legs: pants, greaves, etc.
				- Will need a global list of names.
					+ Make it a dictionary keyed by item name, with a list
						containing the the generating location's difficulty
						level and an item object as the value. Then only allow
						locations in the same difficulty level to use the item
						and have them duplicate the object found in the dictionary,
						rather than creating a new one. Any time a new item name
						is generated, add it to the dictionary.

saving
	- This could be done after every command.
	- Each time a command is issued, the game could check for loaded state, then
		load (or create) it if none is present.
	- Just shove everything into a single object and pickle it.
	- Store each object in its own file, named by the Telegram chat ID.
	- The Telegram bot will probably just write all of its State objects to files
		on a set schedule (once every N minutes).
	- The terminal version could have a save command.
	
UI
	- designed abstractly to allow me to test with a command line and easily
		port to Telegram wrapper when ready.
	- commands:
		+ general: stats (shows xp, hp, power, and max hp)
		+ movement: north, east, south, west
		+ inventory: list, use [item name]
		+ options in fight: attack, list, use, flee
	- Telegram bot name: tiny_rpg_bot
	- Send this message when the Telegram bot starts:
		"""
		Welcome, adventurer, to Generica, a land of infinite* possibilities!

		* Subject to technical and mechanical limitations. Other limitations may apply. 	// Italicize this part.
			Infinite does not necessarily mean interesting. Developer assumes no liability
			for any shortcomings, bugs, bad design, anti-features, or malfeasance.
			May cause cancer.
		"""
	- Opening text for combat:
		"""
		You encounter a {monster}. It (advances towards you / lunges at you /
			glares at you / charges you / rushes you / leaps at you / speeds
			towards you / runs at you) {adverb}!
		"""
		


DONE:
	
	Add a command to "search" an area, generating encounters and items without
		moving.

	When the player gets an item, display its stats with the name to avoid the
		need to use /list every time.

	Item names with capital letters can't be used or sold: [fixed (the easy way)]
		- Possible fixes:
			+ Easier: Make the Telegram bot accept mixed case commands, instead [done]
				of converting them to all lowercase.
			+ Better: Keep converting commands to lowercase and also convert all
				names to lowercase before putting them in the dictionary.
				-> Would need to write a program to fix the dictionaries in the
					save files to use all lowercase keys to avoid losing the
					group's game.

    Using the /list command with too many items fails to send a message because the
        message is too long for the API. Need to write a method in the bot to break
        output into multiple messages if needed (if over 4096 characters).
		- Also need to somehow handle the case where the large item list needs to	[just sending long item lists in their own message]
			be sent while the combat message is being used. Maybe need to stop
			truncating that message when it gets too large and just create a new
			message with the buttons.

	Weapon nouns are not sorted by power. If there isn't a good reason to keep
		them unordered, make the weapon nouns scale similarly to the armor nouns.

	To reduce spam: control the fights with an inline keyboard (buttons that
		appear under the message in the chat) that just edits a single fight/encounter
		message.
		- When editing (or sending a message, there is an upper limit of 4096
			characters. If the limit is reached, just start removing characters
			from the top of the message being edited. Reaching this limit in a
			fight should be unlikely anyway.
		- In progress... hopefully just finished the sendCombatOutput() function
			in telegramBot.py.
		- Need a script to update the save files. Remember to make backups before [don't actually need this]
			running the script.
			+ Luckily, I don't actually want to load the combat state from the
				save file, so I never attempt to load the new state data. This
				means that I don't actually need to update the save files.
	
	Make healing items stronger so players don't die so often. They should more
		than recover the amount of hit points a player is likely to lose to
		the encounter that spawns the healing item.

	Need to adjust the xp curve or increase xp reward more quickly. [done]
		- Level 9
		- experience points: 23625
		- next level at: 37834

	Still spawning double space items: "squalling bowl of  stir-fried vegetables"	[fixed]
		- It seems like I fixed this bug correctly the first time. This was probably 
			spawned because it was generated before I fixed the healing item noun list.
